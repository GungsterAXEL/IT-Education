package Lection_04;

import java.util.ArrayDeque;
import java.util.Deque;

public class Example_03_Deque {
    public static void main(String[] args) {
        Deque<Integer> deque = new ArrayDeque<>();

        deque.addFirst(1); // Добавление элементов в начало очереди.
        deque.add(123); // Просто добавление элементов в очередь.
        deque.addLast(2); // Добавление элементов в конец очереди.
        System.out.println("Добавили элементы в очередь: " + deque);

        deque.removeFirst(); // Удаление элементов из начала очереди.
        deque.removeLast(); // Удаление элементов из конца очереди.
        deque.remove(); // Просто удаление элементов из очереди.
        System.out.println("Удалили элементы из очереди: " + deque);

        deque.offerFirst(1); // Аналогично добавлению элементов в начало очереди.
        deque.offerLast(2); // Аналогично добавлению элементов в конец очереди.
        deque.offer(123); // Аналогично добавлению элементов в очередь.
        System.out.println("Добавили элементы в очередь: " + deque);

        deque.pollFirst(); // Аналогично удалению элементов из начала очереди.
        deque.pollLast(); // Аналогично удалению элементов из конца очереди.
        deque.poll(); // Аналогично удалению элементов из очереди.
        System.out.println("Удалили элементы из очереди: " + deque);

        deque.add(1);
        System.out.println("Состояние очереди до присваивания элементов в переменную: " + deque);
        System.out.println("Первый элемент очереди: " + deque.getFirst()); // Просмотр первого элемента очереди. Если
                                                                           // элемент пустой, то выдаст ошибку.
        System.out.println("Последний элемент очереди: " + deque.getLast()); // Просмотр последнего элемента очереди.
                                                                             // Если элемент пустой, то выдаст ошибку.
        System.out.println(deque.getClass()); // Узнать класс (class java.util.ArrayDeque) обрабатываемой очереди.
        int i = deque.getFirst(); // Значение элементов очереди можно присвоить в переменную без удаления
                                  // элементов из очереди. Для метода .getLast() присваивание осуществляется
                                  // аналогичным образом.
        System.out.println("Результат присваивания в переменную i: " + i);

        System.out.println("Первый элемент очереди: " + deque.peekFirst()); // Просмотр первого элемента очереди. В
                                                                            // отличии от метода .getFirst() ошибку не
                                                                            // выдаст, а вернёт null.
        System.out.println("Последний элемент очереди: " + deque.peekLast()); // Просмотр последнего элемента очереди. В
                                                                              // отличии от метода .getFirst() ошибку не
                                                                              // выдаст, а вернёт null.
        System.out.println(deque.peek()); // Просмотр элемента очереди. В отличии от метода .getFirst() ошибку не
                                          // выдаст, а вернёт null.
        int y = deque.peekFirst(); // Значение элементов очереди можно присвоить в переменную без удаления
                                   // элементов из очереди и таким образом. Для методов .peek() и .peekLast()
                                   // присваивание осуществляется аналогичным образом.
        System.out.println("Результат присваивания в переменную y: " + y);
        System.out.println("Состояние очереди после присваивания элементов в переменную: " + deque);
    }
}
